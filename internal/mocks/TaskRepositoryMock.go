// Code generated by MockGen. DO NOT EDIT.
// Source: internal/business/TaskRepository.go

// Package mocks is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	models "github.com/keuller/simple-api/internal/models"
	reflect "reflect"
)

// MockTaskRepository is a mock of TaskRepository interface
type MockTaskRepository struct {
	ctrl     *gomock.Controller
	recorder *MockTaskRepositoryMockRecorder
}

// MockTaskRepositoryMockRecorder is the mock recorder for MockTaskRepository
type MockTaskRepositoryMockRecorder struct {
	mock *MockTaskRepository
}

// NewMockTaskRepository creates a new mock instance
func NewMockTaskRepository(ctrl *gomock.Controller) *MockTaskRepository {
	mock := &MockTaskRepository{ctrl: ctrl}
	mock.recorder = &MockTaskRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockTaskRepository) EXPECT() *MockTaskRepositoryMockRecorder {
	return m.recorder
}

// Save mocks base method
func (m *MockTaskRepository) Save(task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Save", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Save indicates an expected call of Save
func (mr *MockTaskRepositoryMockRecorder) Save(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Save", reflect.TypeOf((*MockTaskRepository)(nil).Save), task)
}

// Update mocks base method
func (m *MockTaskRepository) Update(task models.Task) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", task)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockTaskRepositoryMockRecorder) Update(task interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockTaskRepository)(nil).Update), task)
}

// FindByID mocks base method
func (m *MockTaskRepository) FindByID(value string) (models.Task, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", value)
	ret0, _ := ret[0].(models.Task)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID
func (mr *MockTaskRepositoryMockRecorder) FindByID(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockTaskRepository)(nil).FindByID), value)
}

// FetchAllTasks mocks base method
func (m *MockTaskRepository) FetchAllTasks() []models.Task {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FetchAllTasks")
	ret0, _ := ret[0].([]models.Task)
	return ret0
}

// FetchAllTasks indicates an expected call of FetchAllTasks
func (mr *MockTaskRepositoryMockRecorder) FetchAllTasks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FetchAllTasks", reflect.TypeOf((*MockTaskRepository)(nil).FetchAllTasks))
}

// Delete mocks base method
func (m *MockTaskRepository) Delete(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockTaskRepositoryMockRecorder) Delete(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockTaskRepository)(nil).Delete), value)
}

// Toggle mocks base method
func (m *MockTaskRepository) Toggle(value string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Toggle", value)
	ret0, _ := ret[0].(error)
	return ret0
}

// Toggle indicates an expected call of Toggle
func (mr *MockTaskRepositoryMockRecorder) Toggle(value interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Toggle", reflect.TypeOf((*MockTaskRepository)(nil).Toggle), value)
}
